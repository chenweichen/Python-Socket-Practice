#Rustlang and its applications

## No.:
## Title:
## https links: 


1.
Rustlang official website
https://www.rust-lang.org/tools/install


https://www.rust-lang.org/learn


https://www.rust-lang.org/what/embedded


https://github.com/rust-embedded/awesome-embedded-rust


Rust by Examples 
https://doc.rust-lang.org/stable/rust-by-example/index.html



2.
Rust LinearAlgebra 
https://nalgebra.org/docs/user_guide/vectors_and_matrices


https://rust-lang-nursery.github.io/rust-cookbook/science.html



3.
We Rewrote Our IoT Platform in Rust and Got Away With It
https://medium.com/dwelo-r-d/we-rewrote-our-iot-platform-in-rust-and-got-away-with-it-2c8867c61b67



4.
Rust with Arduino
https://dev.to/creativcoder/how-to-run-rust-on-arduino-uno-40c0

https://chipwired.com/programming-arduino-with-rust/



5.
[Rust] 程式設計教學
https://jasonblog.github.io/note/Rust/rust_programming.html



6.
WebAssembly + Rust 的前端應用
https://ithelp.ithome.com.tw/users/20119807/ironman/2447


[Day 7] Rust Variables and Mutability 變數和可變性
https://ithelp.ithome.com.tw/articles/10218565


7.
Rust 新手村
https://ithelp.ithome.com.tw/users/20129675/ironman/4260


Rust-並行&並發(一)
https://ithelp.ithome.com.tw/articles/10277734

有關於並行和並發的定義每個人可能有不一樣的解釋
並行指的是在同一時刻，多條指令在 CPU 上同時執行
並發指的是在同一時間區間內，多條指令在 CPU 上同時執行

Rust-並行&並發(二)
https://ithelp.ithome.com.tw/articles/10278240



9.
Interaction between Julia and Rust
https://stackoverflow.com/questions/51916904/interaction-between-julia-and-rust

Calling/Executing Rust function from Julia
Calling/Executing Julia from Rust


https://github.com/alexcrichton/rust-ffi-examples/tree/a2ddf21e4/julia-to-rust


Julia bindings for Rust
https://github.com/Taaitaaiger/jlrs



10.
Rust Dev Tools 
https://github.com/rust-dev-tools



11.
分享 Rust程式語言
https://medium.com/yenlinchen/%E5%88%86%E4%BA%AB-rust%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-20e2028816a5



12.
【譯】Rust vs. Go
https://gist.github.com/weihanglo/3dc1af4b0c15cb9ec600f28a7b06ad2f


Julio Merino 的 Rust vs. Go
http://julio.meroh.net/2018/07/rust-vs-go.html

http://julio.meroh.net/


13.
关于 Rust GC 的争议
http://songtianyi.info/pages/programming/programming-languages/is-rust-garbage-collected.html



14.
The Rust Programming Language
https://doc.rust-lang.org/book/



15.
The Embedded Rust Book
https://docs.rust-embedded.org/book/



16.
Rust 程式設計語言
https://rust-lang.tw/book-tw/



17.
翻譯：Rust 與記憶體
https://rfns.io/blog/tech/2021-06-30-rust-and-the-machine

Rust &TheMachine
https://medium.com/@orbitalK/why-the-machine-b9803a77fa29



18.
Target Tier Policy
https://doc.rust-lang.org/rustc/target-tier-policy.html


Platform Support
https://doc.rust-lang.org/rustc/platform-support.html


平台支援
https://askeing.github.io/rust-book/getting-started.html



19.
LLVM基础设施和Rust
https://www.ttalk.im/2021/12/llvm-infrastructure-and-rust.html

该篇博文重点介绍了LLVM这个编译器框架的一些基本知识，以及RUST如何生成LLVM IR，以及LLVM是怎么进行代码分析和优化的


LLVM Infrastructure and Rust
https://www.bexxmodd.com/log/llvm-infrastrucutre-and-rust/7



20.
Compile Rust for Raspberry Pi ARM
https://medium.com/swlh/compiling-rust-for-raspberry-pi-arm-922b55dbb050



21.
Cross-compilation using Clang
https://clang.llvm.org/docs/CrossCompilation.html

The triple has the general format <arch><sub>-<vendor>-<sys>-<abi>, where:
arch = x86_64, i386, arm, thumb, mips, etc.
sub = for ex. on ARM: v5, v6m, v7a, v7m, etc.
vendor = pc, apple, nvidia, ibm, etc.
sys = none, linux, win32, darwin, cuda, etc.
abi = eabi, gnu, android, macho, elf, etc.
The sub-architecture options are available for their own architectures, of course, so “x86v7a” doesn’t make sense. The vendor needs to be specified only if there’s a relevant change, for instance between PC and Apple. Most of the time it can be omitted (and Unknown) will be assumed, which sets the defaults for the specified architecture. The system name is generally the OS (linux, darwin), but could be special like the bare-metal “none”.

When a parameter is not important, it can be omitted, or you can choose unknown and the defaults will be used. If you choose a parameter that Clang doesn’t know, like blerg, it’ll ignore and assume unknown, which is not always desired, so be careful.

Finally, the ABI option is something that will pick default CPU/FPU, define the specific behaviour of your code (PCS, extensions), and also choose the correct library calls, etc.


