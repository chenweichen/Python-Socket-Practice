# FANUC Issues 

## No.:
## Title:
## https links: 


1.
HOW TO COLLECT DATA USING FANUC FOCAS (MACHINE DATA COLLECTION)
https://support.machinemetrics.com/hc/en-us/articles/360020895854-How-to-Collect-Data-using-FANUC-FOCAS-Machine-Data-Collection-



2.
strangesast@gmail.com 
https://observablehq.com/@strangesast


https://github.com/strangesast


Fanuc Minimal Communication Example
https://github.com/strangesast/fanuc-minimal-example


fanuc focas library compile & runtime files
https://github.com/strangesast/fwlib


a python wrapper for fwlib
https://github.com/strangesast/pyfwlib


fwlib and go
https://github.com/strangesast/fwlib-go


https://github.com/strangesast/fwlib/tree/e90f6a1ca5755a3d835306e9c0fe83372b4efebf/examples



3.
FANUC Series 0i-MF Plus
https://www.fanucindia.com/diemouldprocedures.pdf


FANUC Series 0i-MODEL F
Series 0i-MODEL F具有與最佳機種Series 30i共同操作性、搭載了加工面品質提昇的技術
https://www.fanuctaiwan.com.tw/product-sort-1.php?i=40

https://www.fanuctaiwan.com.tw/upload/Product/F_201804161129fndD3l34.PDF


FANUC Series 0i-MODEL F
FANUC Series 0i-MODEL F has common operability with the upper 30i series, and technology has been implemented for achieving high quality in machining surfaces.
https://www.fanuc.co.jp/en/product/cnc/fs_0i-f.html

https://www.fanuc.co.jp/en/product/catalog/pdf/cnc/FS0i-F(E)-05a.pdf


FANUC Series 0i-MODEL F Plus
FANUC Series 0i-MODEL F Plus is a succession CNC of Series 0i-MODEL F with renewed design, enhanced basic functions and the pursuit of ease of use.
It is equipped with the latest control technology for fine surface machining and reducing cycle time, and with customizable functions that can flexibly create screens suitable for machine tools.
https://www.fanuc.co.jp/en/product/cnc/fs_0i-fplus.html

https://www.fanuc.co.jp/en/product/catalog/pdf/cnc/FS0i-F_Plus(E)-02.pdf

https://www.fanuc.co.jp/en/product/catalog/pdf/cnc/FS0i-F_Plus(C)-02.pdf



4.
FWLIB32 | GENERAL
FOCAS1 / FOCAS2
CNC/PMC Data window library
FOCAS1/2 : FANUC Open CNC API Specifications version 1 or 2
https://www.inventcom.net/fanuc-focas-library/general/fwlib32



5.
Handler Issues Applying cdll in Python
https://stackoverflow.com/questions/41675881/handler-issues-applying-cdll-in-python



6.
RoboDK API
https://robodk.com/doc/en/RoboDK-API.html#RoboDKAPI

The RoboDK API (Application Program Interface) is a set of routines and commands that RoboDK exposes through a programming language. The RoboDK API allows you to program any robot using one of the supported programming languages, such as C#, Python or C++. You can also automate repetitive tasks using the RoboDK API.

Compared to vendor-specific robot programming, with the RoboDK API it is possible to simulate and program any robot using a unique/universal programming language, such as Python. The following page provides an overview and a video showing offline programming with the API.

The RoboDK API is available for Python, C#, C, C++, Visual Basic (.NET) and Matlab. Any of these programming languages can be used to simulate and program any robot arm.



7.
yaskawa
https://github.com/topics/yaskawa



8.
A Python library for controlling Yaskawa MOTOMAN robots.
https://github.com/ra-mtp-ntnu/moto



9.
加载C库
from ctypes import *
facos = cdll.LoadLibrary('./libfwlib32.so.1')


调用C库的格式如下,需要把变量类型转成C类型,指针传入需要调用addressof函数
handler = c_short()
res = facos.cnc_allclibhndl3(c_char_p(ip), c_ushort(port), c_long(timeout), addressof(self.handler))


处理C语言结构体的时候,先定义一个Python数据结构,所有成员变量都必须用C类型
class IODBPSD_U(Union):
    _fields_ = [
        ('cdata', c_char),
        ('idata', c_short),
        ('ldata', c_long), 
        ('cdatas', c_char * MAX_AXIS),
        ('idatas', c_short * MAX_AXIS), 
        ('ldatas', c_long * MAX_AXIS)
    ]

class IODBPSD(Structure):
    _fields_ = [
         ('datano', c_short), 
         ('type', c_short),
         ('u', IODBPSD_U)
    ]

iodbpsd = IODBPSD()
facos.cnc_rdparam(self.handler, 6711, 0, 4 + MAX_AXIS, addressof(iodbpsd))
print(iodbpsd.u.ldata)


以下是一个完整的demo
from ctypes import *

MAX_AXIS = 48


class IODBPSD_U(Union):
    _fields_ = [
        ('cdata', c_char),
        ('idata', c_short),
        ('ldata', c_long),
        ('cdatas', c_char * MAX_AXIS),
        ('idatas', c_short * MAX_AXIS),
        ('ldatas', c_long * MAX_AXIS)
    ]


class IODBPSD(Structure):
    _fields_ = [
        ('datano', c_short),
        ('type', c_short),
        ('u', IODBPSD_U)
    ]


facos = cdll.LoadLibrary('./libfwlib32.so.1')


class Facos(object):
    def __init__(self, ip, port, timeout=10):
        if isinstance(ip, str):
            ip = ip.encode()
        self.ip = ip
        self.port = port
        self.timeout = timeout
        self.handler = c_short()

    def connect(self):
        res = facos.cnc_allclibhndl3(c_char_p(self.ip), c_ushort(self.port), c_long(self.timeout), addressof(self.handler))
        return res == 0

    def disconnect(self):
        res = facos.cnc_freelibhndl(self.handler)
        return res == 0

    @property
    def products(self):
        """
        生产件数
        :return: 生产件数
        """
        iodbpsd = IODBPSD()
        facos.cnc_rdparam(self.handler, 6711, 0, 4 + MAX_AXIS, addressof(iodbpsd))
        return iodbpsd.u.ldata

    def __enter__(self):
        if self.connect():
            return self
        raise Exception("Connection failed")

    def __exit__(self, type, value, traceback):
        self.disconnect()


if __name__ == "__main__":
    with Facos("192.168.1.1", 8193) as f:
        print("生产件数:", f.products)



10.
Extract Data from Mazak Controllers
https://www.cnczone.com/forums/mazak-mitsubishi-mazatrol/238404-extract-data-mazak-controllers.html


